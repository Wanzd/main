<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    					http://www.springframework.org/schema/util 
    					http://www.springframework.org/schema/util/spring-util-3.0.xsd
    					http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd 
                        http://www.springframework.org/schema/data/mongo 
                        http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd   
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>


	<bean id="dataSource_oracle"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${mysql.driver}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${mysql.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${mysql.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${mysql.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${mysql.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${mysql.maxWait}"></property>
	</bean>
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${mysql.driver}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${mysql.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${mysql.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${mysql.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${mysql.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${mysql.maxWait}"></property>
	</bean>
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.pd.it" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<bean id="dataSource2"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${mysql.driver}" />
		<property name="url" value="${mysql2.url}" />
		<property name="username" value="${mysql2.username}" />
		<property name="password" value="${mysql2.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${mysql.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${mysql.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${mysql.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${mysql.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${mysql.maxWait}"></property>
	</bean>
	<!-- 连接池配置 -->
	<bean id="jedisPoolConfig"
		class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="30" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="10" />
		<!-- 每次释放连接的最大数目 -->
		<property name="numTestsPerEvictionRun" value="1024" />
		<!-- 释放连接的扫描间隔（毫秒） -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 连接最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
		<property name="maxWaitMillis" value="1500" />
		<!-- 在获取连接的时候检查有效性, 默认false -->
		<property name="testOnBorrow" value="true" />
		<!-- 在空闲时检查有效性, 默认false -->
		<property name="testWhileIdle" value="true" />
		<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
		<property name="blockWhenExhausted" value="false" />
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="host" value="${redis.ip}"></constructor-arg>
		<constructor-arg name="port" value="${redis.port}"></constructor-arg>
		<constructor-arg name="poolConfig"
			ref="jedisPoolConfig"></constructor-arg>
	</bean>

	<mongo:mongo id="mongo" host="${mongo.host}"
		port="${mongo.port}">
		<mongo:options
			connections-per-host="${mongo.connectionsPerHost}"
			threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
			connect-timeout="${mongo.connectTimeout}"
			max-wait-time="${mongo.maxWaitTime}"
			auto-connect-retry="${mongo.autoConnectRetry}"
			socket-keep-alive="${mongo.socketKeepAlive}"
			socket-timeout="${mongo.socketTimeout}" slave-ok="${mongo.slaveOk}"
			write-number="1" write-timeout="0" write-fsync="true" />
	</mongo:mongo>
	<!-- 设置使用的数据库 名 -->
	<mongo:db-factory id="mongoDbFactory" dbname="test"
		mongo-ref="mongo" />
	<!-- mongodb的模板 -->
	<bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory"
			ref="mongoDbFactory" />
	</bean>

	<mvc:annotation-driven>
		<mvc:message-converters>
			<!-- bean class="org.springframework.http.converter.StringHttpMessageConverter" 
				/ -->
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper" ref="jacksonObjectMapper" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<bean id="jacksonObjectMapper"
		class="com.pd.it.converter.CustomObjectMapper" />


</beans>